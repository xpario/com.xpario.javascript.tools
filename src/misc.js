
export function hello_world() {
    alert('hello world!');
}

export function typeOf(obj) {
    return Object.prototype.toString.call(obj).replace(/^\[object (.+)]$/, "$1").toLowerCase()
}

export function isValid_Email(email) {
    return (/^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@(([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{2,})$/.test(email));
}

export const isRegEx = (value) => {
    return value instanceof RegExp;
}

export function isValidRegExString(value) {
    try {
        new RegExp(value);
    } catch (e) {
        return false;
    }
    return true;
}

export function isJSON(item) {
    item = typeof item !== "string"
        ? JSON.stringify(item)
        : item;

    try {
        item = JSON.parse(item);
    } catch (e) {
        return false;
    }

    return typeof item === "object" && item !== null;
}

export function isEmpty(val) {
    let result = true;
    let test = val;
    if (isNullOrUndefined(test)) return true;
    if (isString(test)) test = test.trim();
    if (isString(test) || Array.isArray(test)) result = test.isEmpty();
    return result;
}

export function isObject(obj) {
    return ((typeof obj === 'object') && (obj !== null) && (!Array.isArray(obj)));
}

export function isFunction(func) {
    return (typeof func === 'function');
}

export function isNumber(n) {
    return /^-?[\d.]+(?:e-?\d+)?$/.test(n);
}

export function isBoolean(value) {
    return typeof value === 'boolean';
}

export function toType(obj) {
    return ({}).toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase()
}

export function isValidSQLId(id) {
    let valid = false;
    if (isString(id)) {
        valid = !isEmpty(id);
    }
    if (isNumber(id)) {
        valid = id > 0;
    }
    return valid;
}

export function stripChars(str) {
    if(!isString(str)) return str;
    return str.replace(/\D/g, '');
}

export function isDefined(variable) {
    return (typeof variable !== typeof undefined);
}

export function isEmptyObject(obj) {
    let val = false;
    if (isObject(obj)) {
        val = Object.keys(obj).length === 0;
    }
    return val;
}
export function isObjectDefined(obj) {
    return (isObject(obj) && obj !== null && obj !== {});
}

export function markRequired(label) {
    return label + '*';
}

export function markAutoGenerated(label) {
    return label + '**';
}

export async function wait(ms = 5000) {
    await new Promise(resolve => setTimeout(resolve, ms));
}

export function isString(x) {
    return x?.constructor === String;
}

export function trimIfString(x) {
    if (typeof x === 'string' || x instanceof String) x = x.trim();
    return x;
}

export function isNull(val) {
    if (typeof val === 'undefined') return true;
    if (val === null) return true;
    if (val ==='null') return true;
    if (typeof val === 'string') return val.trim() === '';
    return val == null;
}

export function ifNull(val, defaultVal) {
    if (isNull(val)) return defaultVal;
    return val;
}

export function isNullOrUndefined(val) {
    return isNull(val) || !isDefined(val);
}
